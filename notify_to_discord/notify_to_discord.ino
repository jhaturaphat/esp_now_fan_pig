#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

#define BUZZER_PIN 18  //Buzzer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏≠‡∏™‡∏≤‡∏£

unsigned long previousMillis = 0;
#define WIFI_TIMEOUT 30000 

const char* ssid = "TEST";
const char* password = ""; // ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
const char* webhookUrl = "https://discord.com/api/webhooks/1344992087879188550/vGrbJbJQUkaf_ZmxpzSvm9_1gcwHrEylA-VOQCTrlKsu2gq8mq9tTycQWKT7I8jlQb4n";

unsigned long lastMessage = 0;
const unsigned long interval = 60000 * 2; // ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

String buffer = "";  // Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∞‡∏™‡∏° message
bool lastWasNewline = false;  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö \n ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
bool receiving = false;  // Track ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö message ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NTP Client
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 25200, 60000); // UTC+7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, 16, 17); 
  
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("Connected to WiFi!");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    String ip = String(WiFi.localIP());
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    // sendMessageToDiscord("Gateway ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ");
    sendMessageToDiscord("üì∂ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ \n IP:"+ip);  
  } else {
    Serial.println();
    Serial.println("Failed to connect to WiFi");
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô NTP Client
  timeClient.begin();


}

void loop() {
  
  unsigned long currentMillis = millis();
    
  static unsigned long lastDataTime = 0;
  const unsigned long dataTimeout = 1000; // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  while (Serial2.available()) {
    char c = Serial2.read();
    buffer += c;
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    // Serial.print("Received char: ");
    // if (c == '\n') {
    //   Serial.println("[NEWLINE]");
    // } else if (c == '\r') {
    //   Serial.println("[CARRIAGE RETURN]");
    // } else {
    //   Serial.println(c);
    // }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö start marker
    if (buffer.endsWith("START\n")) {
      buffer = "";  // ‡∏•‡πâ‡∏≤‡∏á buffer ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      receiving = true;
      Serial.println("Started new message");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö end marker
    else if (receiving && buffer.endsWith("END\n")) {
      buffer.replace("START\n", "");  // ‡∏•‡∏ö start marker
      buffer.replace("END\n", "");    // ‡∏•‡∏ö end marker
      buffer.trim();
      if (buffer.length() > 0) {
        Serial.println("Full message received:");
        Serial.println("=== START ===");
        Serial.println(buffer);
        Serial.println("=== END ===");
        sendMessageToDiscord("üéâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏±‡∏î‡∏•‡∏° ‡∏Ñ‡∏£‡∏±‡∏ö\n"+buffer);        
        // sendMessageToDiscord(buffer);
      } else {
        Serial.println("Empty buffer after trim!");
      }
      buffer = "";
      receiving = false;
    }
  }

  delay(10);  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô loop ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
  
  
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  // if (currentMillis - lastMessage > interval) {
  //   if (WiFi.status() == WL_CONNECTED) {
  //     String testMessage = "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å ESP32 - ‡πÄ‡∏ß‡∏•‡∏≤: " + String(currentMillis/1000) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
  //     sendMessageToDiscord(testMessage);
  //     lastMessage = currentMillis;
  //   }
  // }
  
  // Test Serial2.print("STATUS\n");
  // if(digitalRead(BUZZER_PIN)){
  //   Serial2.println("üìäSTATUS\n");
  // }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
  if ((WiFi.status() != WL_CONNECTED)) {
    Serial.println("WiFi disconnected, attempting to reconnect...");
    WiFi.disconnect();
    WiFi.reconnect();
    previousMillis = currentMillis;
    digitalWrite(BUZZER_PIN, HIGH);    
    delay(1000);
  }else{
    digitalWrite(BUZZER_PIN, LOW);     
  }
  // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  systemStatus();
}

void systemStatus(){
  timeClient.update();
  // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();
  int currentSecond = timeClient.getSeconds();

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤ 8:00 ‡πÅ‡∏•‡∏∞ 20:00
  if ((currentHour == 8 || currentHour == 12 || currentHour == 16 || 
       currentHour == 20 || currentHour == 0 || currentHour == 4) && 
       currentMinute == 0 && currentSecond == 0) {
    String testMessage = "ü§ñ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≤‡∏£‡πå‡∏° üê∑üêì - ‡πÄ‡∏ß‡∏•‡∏≤: " + String(currentHour) + ":"+String(currentMinute)+" ‡∏ô‡∏≤‡∏ó‡∏µ";
    sendMessageToDiscord(testMessage);    
    delay(1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    // Serial2.print("STATUS\n");
  }
}

void sendMessageToDiscord(String msg) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected - cannot send message");
    return;
  }
  
  WiFiClientSecure client;
  client.setInsecure(); // ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL certificate (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  
  HTTPClient http;
  
  Serial.println("Attempting to send message to Discord...");
  
  if (http.begin(client, webhookUrl)) {
    http.addHeader("Content-Type", "application/json");
    http.addHeader("User-Agent", "ESP32-Discord-Bot");
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON payload ‡πÅ‡∏•‡∏∞ escape ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    String escapedMsg = msg;
    escapedMsg.replace("\"", "\\\""); // escape ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ quote
    escapedMsg.replace("\n", "\\n");  // escape newline    
    
    String jsonPayload = "{\"content\": \"" + escapedMsg + "\"}";
    
    Serial.println("Payload: " + jsonPayload);
    
    // ‡∏™‡πà‡∏á POST request
    int httpResponseCode = http.POST(jsonPayload);
    
    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      
      if (httpResponseCode == 200 || httpResponseCode == 204) {
        Serial.println("Message sent successfully!");
      } else {
        String response = http.getString();
        Serial.println("Response: " + response);
      }
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
      Serial.println("Error: " + http.errorToString(httpResponseCode));
    }
    
    http.end();
  } else {
    Serial.println("Failed to begin HTTP connection");
  }
  
  delay(100); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
}
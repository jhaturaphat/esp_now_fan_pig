/*
 * ESP32 Gateway Code - ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å ESP-01 Sensors ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 7 ‡∏ï‡∏±‡∏ß
 * ‡πÉ‡∏ä‡πâ ESP-NOW Protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
 * Fixed Version
 */

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î PIN
#define BUZZER_PIN 18       // Buzzer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
#define SIREN_PIN 19        // Siren ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å
#define LED_STATUS_PIN 2    // LED ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Sensor
#define MAX_SENSORS 7
#define COMMUNICATION_TIMEOUT 30000  // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPL6ngbPI81S"
#define BLYNK_TEMPLATE_NAME "test01"
#define BLYNK_AUTH_TOKEN "eKOKJX72HVSjWGsNVasTbh0aSUIazDU-"

#include <BlynkSimpleEsp32.h>
#include <esp_now.h>
#include <WiFi.h>

unsigned long lastSensorCheck = 0;
unsigned long lastLedUpdate = 0;

char ssid[] = "kid_2.4GHz";
char pass[] = "xx3xx3xx";

// ‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WiFi ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
// char ssid[] = "‡∏ä‡∏∑‡πà‡∏≠_WiFi_‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à";
// char pass[] = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô_‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à";

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Sensor
typedef struct sensor_message {
  uint8_t sensor_id;      // ID ‡∏Ç‡∏≠‡∏á sensor (1-7)
  bool switch_status;     // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch (true=closed, false=open)
  uint32_t timestamp;     // timestamp
} sensor_message;

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ sensor
struct sensor_status {
  bool is_online;           // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  bool switch_state;        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch
  unsigned long last_seen;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  uint8_t mac[6];          // MAC address ‡∏Ç‡∏≠‡∏á sensor
};

sensor_status sensors[MAX_SENSORS];
bool siren_active = false;
bool buzzer_active = false;
unsigned long last_check_time = 0;
unsigned long siren_start_time = 0;
unsigned long buzzer_start_time = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Starting ESP32 Gateway...");

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î PIN Mode ‡∏Å‡πà‡∏≠‡∏ô
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(SIREN_PIN, OUTPUT);
  pinMode(LED_STATUS_PIN, OUTPUT);
  
  // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(SIREN_PIN, LOW);
  digitalWrite(LED_STATUS_PIN, LOW);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sensor
  initializeSensors();
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WiFi ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Station ‡∏û‡∏£‡πâ‡∏≠‡∏° ESP-NOW
  WiFi.mode(WIFI_AP_STA);  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô AP+STA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ESP-NOW
  Serial.println("üì° ESP32 MAC Address: " + WiFi.macAddress());
  Serial.println("üì° ESP32 AP MAC Address: " + WiFi.softAPmacAddress());
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ESP-NOW ‡∏Å‡πà‡∏≠‡∏ô WiFi
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå Error initializing ESP-NOW");
    return;
  }
  Serial.println("‚úÖ ESP-NOW initialized successfully");
  
  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô callback function
  esp_now_register_recv_cb(onDataReceive);
  Serial.println("‚úÖ ESP-NOW callback registered");
  Serial.println("üéØ Gateway is ready to receive from any ESP-01 sensor");
  Serial.println("üìã Expected sensor IDs: 1, 2, 3, 4, 5, 6, 7");
  
  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Blynk
  Serial.println("üîç Scanning for WiFi networks...");
  int n = WiFi.scanNetworks();
  Serial.printf("Found %d networks:\n", n);
  for (int i = 0; i < n; i++) {
    Serial.printf("  %d: %s (RSSI: %d) %s\n", i + 1, WiFi.SSID(i).c_str(), WiFi.RSSI(i), 
                  WiFi.encryptionType(i) == WIFI_AUTH_OPEN ? "[OPEN]" : "[SECURED]");
  }
  Serial.println();
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  WiFi.disconnect(true);  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤
  delay(1000);
  WiFi.mode(WIFI_AP_STA);    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô AP+STA mode
  WiFi.setHostname("ESP32-Gateway");  // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ device
  
  Serial.printf("üîó Connecting to WiFi: %s\n", ssid);
  WiFi.begin(ssid, pass);
  
  int wifi_attempts = 0;
  while (WiFi.status() != WL_CONNECTED && wifi_attempts < 30) {
    delay(1000);
    wifi_attempts++;
    Serial.printf("Attempt %d/30 - Status: %d\n", wifi_attempts, WiFi.status());
    
    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (wifi_attempts % 10 == 0) {
      Serial.println("üîÑ Retrying WiFi connection...");
      WiFi.disconnect();
      delay(1000);
      WiFi.begin(ssid, pass);
    }
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi connected successfully!");
    Serial.printf("üì∂ SSID: %s\n", WiFi.SSID());
    Serial.printf("üì° IP address: %s\n", WiFi.localIP().toString());
    Serial.printf("üì∂ Signal strength: %d dBm\n", WiFi.RSSI());
    Serial.printf("üîê MAC Address: %s\n", WiFi.macAddress());
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Blynk
    Serial.println("üîó Connecting to Blynk...");
    Blynk.config(BLYNK_AUTH_TOKEN);
    if (Blynk.connect()) {
      Serial.println("‚úÖ Blynk connected");
    } else {
      Serial.println("‚ùå Blynk connection failed");
    }
  } else {
    Serial.println("\n‚ùå WiFi connection failed!");
    Serial.printf("Final WiFi status: %d\n", WiFi.status());
    Serial.println("üìã WiFi Status Codes:");
    Serial.println("  0 = WL_IDLE_STATUS");
    Serial.println("  1 = WL_NO_SSID_AVAIL (Network not found)");
    Serial.println("  2 = WL_SCAN_COMPLETED");
    Serial.println("  3 = WL_CONNECTED");
    Serial.println("  4 = WL_CONNECT_FAILED (Wrong password)");
    Serial.println("  5 = WL_CONNECTION_LOST");
    Serial.println("  6 = WL_DISCONNECTED");
    Serial.println("‚ö†Ô∏è Running without Blynk (ESP-NOW only mode)");
  }
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  testSounds();
  
  Serial.println("\nüöÄ ESP32 Gateway Ready");
  Serial.println("üì° Listening for ESP-NOW messages on all channels...");
  Serial.println("üîç Waiting for sensors to register...");
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  printSystemStatus();
}

void loop() {
  unsigned long currentMillis = millis();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sensor ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  if (currentMillis - lastSensorCheck >= 1000) {
    lastSensorCheck = currentMillis;
    checkSensorCommunication();
    handleAlarms();  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó LED ‡∏ó‡∏∏‡∏Å 200 ms
  if (currentMillis - lastLedUpdate >= 200) {
    lastLedUpdate = currentMillis;
    updateStatusLED();
  }

  // Blynk ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ WiFi ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.run();
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug)
  static unsigned long lastStatusPrint = 0;
  if (currentMillis - lastStatusPrint >= 10000) {
    lastStatusPrint = currentMillis;
    printSystemStatus();
  }
}

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ESP32 Arduino Core ‡πÉ‡∏´‡∏°‡πà
void onDataReceive(const esp_now_recv_info_t *recv_info, const uint8_t *incomingData, int len) {
  Serial.println("üì® ESP-NOW message received!");
  Serial.printf("   From MAC: %02X:%02X:%02X:%02X:%02X:%02X\n", 
                recv_info->src_addr[0], recv_info->src_addr[1], recv_info->src_addr[2],
                recv_info->src_addr[3], recv_info->src_addr[4], recv_info->src_addr[5]);
  Serial.printf("   Data length: %d bytes\n", len);
  
  if (len != sizeof(sensor_message)) {
    Serial.printf("‚ùå Invalid message size: %d bytes (expected: %d)\n", len, sizeof(sensor_message));
    Serial.print("Raw data: ");
    for (int i = 0; i < len; i++) {
      Serial.printf("%02X ", incomingData[i]);
    }
    Serial.println();
    return;
  }
  
  sensor_message msg;
  memcpy(&msg, incomingData, sizeof(msg));
  
  Serial.printf("   Parsed - Sensor ID: %d, Switch: %s, Timestamp: %lu\n", 
                msg.sensor_id, msg.switch_status ? "CLOSED" : "OPEN", msg.timestamp);
  
  if (msg.sensor_id < 1 || msg.sensor_id > MAX_SENSORS) {
    Serial.printf("‚ùå Invalid sensor ID: %d (valid range: 1-%d)\n", msg.sensor_id, MAX_SENSORS);
    return;
  }
  
  int index = msg.sensor_id - 1;
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sensor
  sensors[index].is_online = true;
  sensors[index].switch_state = msg.switch_status;
  sensors[index].last_seen = millis();
  memcpy(sensors[index].mac, recv_info->src_addr, 6);
  
  Serial.printf("‚úÖ Sensor %d registered successfully! Switch=%s\n", 
                msg.sensor_id, msg.switch_status ? "CLOSED" : "OPEN");
  
  // ‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô Blynk (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
  if (WiFi.status() == WL_CONNECTED && Blynk.connected()) {
    Blynk.virtualWrite(index, msg.switch_status ? 1 : 0);  // V0..V6
    Serial.printf("üì§ Sent to Blynk V%d: %d\n", index, msg.switch_status ? 1 : 0);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch
  if (!msg.switch_status) {  // switch ‡πÄ‡∏õ‡∏¥‡∏î (‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô)
    triggerSiren();
    Serial.printf("üö® ALERT: Sensor %d detected intrusion!\n", msg.sensor_id);
  }
}

void initializeSensors() {
  for (int i = 0; i < MAX_SENSORS; i++) {
    sensors[i].is_online = false;
    sensors[i].switch_state = true;  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô closed
    sensors[i].last_seen = 0;
    memset(sensors[i].mac, 0, 6);
  }
  Serial.println("‚úÖ Sensors initialized");
}

void checkSensorCommunication() {
  if (millis() - last_check_time < 10000) return;  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
  last_check_time = millis();
  int offline_count = 0;
  int registered_count = 0;  // ‡∏ô‡∏±‡∏ö sensor ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  
  for (int i = 0; i < MAX_SENSORS; i++) {
    if (sensors[i].last_seen > 0) {  // sensor ‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      registered_count++;
      if (millis() - sensors[i].last_seen > COMMUNICATION_TIMEOUT) {
        if (sensors[i].is_online) {
          Serial.printf("‚õî WARNING: Lost communication with Sensor %d\n", i + 1);
          sensors[i].is_online = false;
          
          // ‡πÅ‡∏à‡πâ‡∏á OFFLINE ‡∏ö‡∏ô Blynk
          if (WiFi.status() == WL_CONNECTED) {
            Blynk.virtualWrite(i, 0);
          }
        }
        offline_count++;
      }
    }
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sensor ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  if (registered_count == 0) {
    // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ sensor ‡πÉ‡∏î‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô -> ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    return;
  }
  
  if (offline_count == registered_count) {
    // ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î -> ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ã‡πÄ‡∏£‡∏ô
    triggerSiren();
    Serial.printf("üö® CRITICAL: Lost communication with ALL %d sensors!\n", registered_count);
  } else if (offline_count > 0) {
    // ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß -> ‡πÄ‡∏õ‡∏¥‡∏î buzzer
    triggerBuzzer();
    Serial.printf("üìµ WARNING: %d/%d sensors offline\n", offline_count, registered_count);
  } else {
    // ‡∏ó‡∏∏‡∏Å sensor ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥ -> ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (buzzer_active && !siren_active) {
      stopBuzzer();
    }
  }
}

void triggerSiren() {
  if (!siren_active) {
    siren_active = true;
    siren_start_time = millis();
    digitalWrite(SIREN_PIN, HIGH);
    Serial.println("üö® SIREN ACTIVATED!");
    
    // ‡∏õ‡∏¥‡∏î buzzer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ã‡πÄ‡∏£‡∏ô
    if (buzzer_active) {
      stopBuzzer();
    }
  }
}

void triggerBuzzer() {
  if (!buzzer_active && !siren_active) {
    buzzer_active = true;
    buzzer_start_time = millis();
    Serial.println("üîî BUZZER ACTIVATED!");
  }
}

void stopSiren() {
  if (siren_active) {
    siren_active = false;
    digitalWrite(SIREN_PIN, LOW);
    Serial.println("‚úÖ SIREN DEACTIVATED");
  }
}

void stopBuzzer() {
  if (buzzer_active) {
    buzzer_active = false;
    digitalWrite(BUZZER_PIN, LOW);
    Serial.println("‚úÖ BUZZER DEACTIVATED");
  }
}

void handleAlarms() {
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ã‡πÄ‡∏£‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  if (siren_active && millis() - siren_start_time > 10000) {
    stopSiren();
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ buzzer (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πà‡∏ô)
  if (buzzer_active && !siren_active) {
    if ((millis() / 500) % 2) {  // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πà‡∏ô‡∏ó‡∏∏‡∏Å 500ms
      digitalWrite(BUZZER_PIN, HIGH);
    } else {
      digitalWrite(BUZZER_PIN, LOW);
    }
  }
}

void updateStatusLED() {
  // LED ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  if (siren_active) {
    // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ã‡πÄ‡∏£‡∏ô‡πÄ‡∏õ‡∏¥‡∏î
    digitalWrite(LED_STATUS_PIN, (millis() / 100) % 2);
  } else if (buzzer_active) {
    // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ buzzer ‡πÄ‡∏õ‡∏¥‡∏î
    digitalWrite(LED_STATUS_PIN, (millis() / 300) % 2);
  } else {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
    digitalWrite(LED_STATUS_PIN, HIGH);
  }
}

void testSounds() {
  Serial.println("üîä Testing buzzer...");
  digitalWrite(BUZZER_PIN, HIGH);
  delay(200);
  digitalWrite(BUZZER_PIN, LOW);
  delay(200);
  
  Serial.println("üîä Testing siren...");
  digitalWrite(SIREN_PIN, HIGH);
  delay(200);
  digitalWrite(SIREN_PIN, LOW);
  
  Serial.println("‚úÖ Sound test complete");
}

void printSystemStatus() {
  Serial.println("\n=== üìä SYSTEM STATUS ===");
  Serial.printf("WiFi: %s\n", WiFi.status() == WL_CONNECTED ? "Connected" : "Disconnected");
  Serial.printf("Blynk: %s\n", Blynk.connected() ? "Connected" : "Disconnected");
  Serial.printf("ESP-NOW: Active\n");
  
  for (int i = 0; i < MAX_SENSORS; i++) {
    if (sensors[i].last_seen > 0) {
      Serial.printf("Sensor %d: %s, Switch: %s, Last seen: %lu ms ago\n",
                    i + 1,
                    sensors[i].is_online ? "üü¢ ONLINE" : "üî¥ OFFLINE",
                    sensors[i].switch_state ? "CLOSED" : "OPEN",
                    millis() - sensors[i].last_seen);
    } else {
      Serial.printf("Sensor %d: ‚ö™ Never registered\n", i + 1);
    }
  }
  Serial.println("========================\n");
}

// ‚úÖ Blynk Virtual Pin handlers
BLYNK_CONNECTED() {
  Serial.println("‚úÖ Connected to Blynk Cloud");
}

BLYNK_DISCONNECTED() {
  Serial.println("‚ùå Disconnected from Blynk Cloud");
}
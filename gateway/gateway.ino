/*
 * ESP32 Gateway Code - ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å ESP-01 Sensors ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 7 ‡∏ï‡∏±‡∏ß
 * ‡πÉ‡∏ä‡πâ ESP-NOW Protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
 */

#include <esp_now.h>
#include <WiFi.h>

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î PIN
#define BUZZER_PIN 18       // Buzzer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
#define SIREN_PIN 19        // Siren ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å
#define LED_STATUS_PIN 2    // LED ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Sensor
#define MAX_SENSORS 7
#define COMMUNICATION_TIMEOUT 30000  // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Sensor
typedef struct sensor_message {
  uint8_t sensor_id;      // ID ‡∏Ç‡∏≠‡∏á sensor (1-7)
  bool switch_status;     // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch (true=closed, false=open)
  uint32_t timestamp;     // timestamp
} sensor_message;

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ sensor
struct sensor_status {
  bool is_online;           // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  bool switch_state;        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch
  unsigned long last_seen;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  uint8_t mac[6];          // MAC address ‡∏Ç‡∏≠‡∏á sensor
};

sensor_status sensors[MAX_SENSORS];
bool siren_active = false;
bool buzzer_active = false;
unsigned long last_check_time = 0;
unsigned long siren_start_time = 0;
unsigned long buzzer_start_time = 0;

void setup() {
  Serial.begin(115200);
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î PIN Mode
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(SIREN_PIN, OUTPUT);
  pinMode(LED_STATUS_PIN, OUTPUT);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WiFi ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Station
  WiFi.mode(WIFI_STA);
  Serial.println("MAC Address: " + WiFi.macAddress());
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô callback function (ESP32 Arduino Core 3.x)
  esp_now_register_recv_cb(onDataReceive);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sensor
  initializeSensors();
  
  Serial.println("ESP32 Gateway Ready");
  Serial.println("Waiting for sensors...");
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  testSounds();
}

void loop() {
  checkSensorCommunication();
  handleAlarms();
  updateStatusLED();
  delay(1000);
}

// Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ESP32 Arduino Core 3.x)
void onDataReceive(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len) {
  sensor_message msg;
  memcpy(&msg, incomingData, sizeof(msg));
  
  if (msg.sensor_id >= 1 && msg.sensor_id <= MAX_SENSORS) {
    int index = msg.sensor_id - 1;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ sensor
    sensors[index].is_online = true;
    sensors[index].switch_state = msg.switch_status;
    sensors[index].last_seen = millis();
    memcpy(sensors[index].mac, recv_info->src_addr, 6);
    
    Serial.printf("üü¢Sensor %d: Switch=%s, RSSI=%d\n", 
                  msg.sensor_id, 
                  msg.switch_status ? "CLOSED" : "OPEN",
                  recv_info->rx_ctrl->rssi);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ switch
    if (!msg.switch_status) {  // switch ‡πÄ‡∏õ‡∏¥‡∏î (‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô)
      triggerSiren();
      Serial.printf("ALERT: Sensor %d detected intrusion!\n", msg.sensor_id);
    }
  }
}

void initializeSensors() {
  for (int i = 0; i < MAX_SENSORS; i++) {
    sensors[i].is_online = false;
    sensors[i].switch_state = true;  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô closed
    sensors[i].last_seen = 0;
    memset(sensors[i].mac, 0, 6);
  }
}

void checkSensorCommunication() {
  if (millis() - last_check_time < 10000) return;  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
  last_check_time = millis();
  int offline_count = 0;
  
  for (int i = 0; i < MAX_SENSORS; i++) {
    if (sensors[i].last_seen > 0) {  // sensor ‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      if (millis() - sensors[i].last_seen > COMMUNICATION_TIMEOUT) {
        if (sensors[i].is_online) {
          Serial.printf("‚õîWARNING: Lost communication with Sensor %d\n", i + 1);
          sensors[i].is_online = false;
        }
        offline_count++;
      }
    }
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô sensor ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
  if (offline_count == MAX_SENSORS) {
    // ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î -> ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ã‡πÄ‡∏£‡∏ô
    triggerSiren();
    Serial.println("CRITICAL: Lost communication with ALL sensors!");
  } else if (offline_count > 0 && offline_count < MAX_SENSORS) {
    // ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß -> ‡πÄ‡∏õ‡∏¥‡∏î buzzer
    triggerBuzzer();
    Serial.printf("üìµWARNING: %d sensors offline\n", offline_count);
  } else {
    // ‡∏ó‡∏∏‡∏Å sensor ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥ -> ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (buzzer_active && !siren_active) {
      stopBuzzer();
    }
  }
}

void triggerSiren() {
  if (!siren_active) {
    siren_active = true;
    siren_start_time = millis();
    digitalWrite(SIREN_PIN, HIGH);
    Serial.println("SIREN ACTIVATED!");
    
    // ‡∏õ‡∏¥‡∏î buzzer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ã‡πÄ‡∏£‡∏ô
    if (buzzer_active) {
      stopBuzzer();
    }
  }
}

void triggerBuzzer() {
  if (!buzzer_active && !siren_active) {
    buzzer_active = true;
    buzzer_start_time = millis();
    Serial.println("BUZZER ACTIVATED!");
  }
}

void stopSiren() {
  if (siren_active) {
    siren_active = false;
    digitalWrite(SIREN_PIN, LOW);
    Serial.println("SIREN DEACTIVATED");
  }
}

void stopBuzzer() {
  if (buzzer_active) {
    buzzer_active = false;
    digitalWrite(BUZZER_PIN, LOW);
    Serial.println("BUZZER DEACTIVATED");
  }
}

void handleAlarms() {
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ã‡πÄ‡∏£‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  if (siren_active && millis() - siren_start_time > 10000) {
    stopSiren();
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ buzzer (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πà‡∏ô)
  if (buzzer_active && !siren_active) {
    if ((millis() / 500) % 2) {  // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πà‡∏ô‡∏ó‡∏∏‡∏Å 500ms
      digitalWrite(BUZZER_PIN, HIGH);
    } else {
      digitalWrite(BUZZER_PIN, LOW);
    }
  }
}

void updateStatusLED() {
  // LED ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  if (siren_active) {
    // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ã‡πÄ‡∏£‡∏ô‡πÄ‡∏õ‡∏¥‡∏î
    digitalWrite(LED_STATUS_PIN, (millis() / 100) % 2);
  } else if (buzzer_active) {
    // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ buzzer ‡πÄ‡∏õ‡∏¥‡∏î
    digitalWrite(LED_STATUS_PIN, (millis() / 300) % 2);
  } else {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
    digitalWrite(LED_STATUS_PIN, HIGH);
  }
}

void testSounds() {
  Serial.println("Testing buzzer...");
  digitalWrite(BUZZER_PIN, HIGH);
  delay(200);
  digitalWrite(BUZZER_PIN, LOW);
  delay(200);
  
  Serial.println("Testing siren...");
  digitalWrite(SIREN_PIN, HIGH);
  delay(200);
  digitalWrite(SIREN_PIN, LOW);
  
  Serial.println("Sound test complete");
}

void printSystemStatus() {
  Serial.println("\n=== SYSTEM STATUS ===");
  for (int i = 0; i < MAX_SENSORS; i++) {
    Serial.printf("üü¢üü¢Sensor %d: %s, Switch: %s, Last seen: %lu ms ago\n",
                  i + 1,
                  sensors[i].is_online ? "ONLINE" : "OFFLINE",
                  sensors[i].switch_state ? "CLOSED" : "OPEN",
                  sensors[i].last_seen > 0 ? millis() - sensors[i].last_seen : 0);
  }
  Serial.println("==================\n");
}